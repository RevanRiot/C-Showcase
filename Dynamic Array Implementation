// File: dynamic_array.c

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int *array;
    size_t size;
    size_t capacity;
} DynamicArray;

void init_array(DynamicArray *arr, size_t capacity)
{
    arr->array = malloc(capacity * sizeof(int));
    arr->size = 0;
    arr->capacity = capacity;
}

void insert(DynamicArray *arr, int value)
{
    if (arr->size == arr->capacity)
    {
        arr->capacity *= 2;
        arr->array = realloc(arr->array, arr->capacity * sizeof(int));
    }
    arr->array[arr->size++] = value;
}

void print_array(DynamicArray *arr)
{
    for (size_t i = 0; i < arr->size; i++)
    {
        printf("%d ", arr->array[i]);
    }
    printf("\n");
}

void free_array(DynamicArray *arr)
{
    free(arr->array);
}

int main()
{
    DynamicArray arr;
    init_array(&arr, 4);

    insert(&arr, 1);
    insert(&arr, 2);
    insert(&arr, 3);
    insert(&arr, 4);

    printf("Array contents:\n");
    print_array(&arr);

    insert(&arr, 5);
    printf("Array after resizing:\n");
    print_array(&arr);

    free_array(&arr);
    return 0;
}
