// File: text_editor.c

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINES 100
#define MAX_LINE_LENGTH 256

char *lines[MAX_LINES];
int line_count = 0;

void add_line(const char *text)
{
    if (line_count < MAX_LINES)
    {
        lines[line_count] = strdup(text);
        line_count++;
    }
    else
    {
        printf("Maximum lines reached.\n");
    }
}

void view_lines()
{
    for (int i = 0; i < line_count; i++)
    {
        printf("%d: %s\n", i + 1, lines[i]);
    }
}

void delete_line(int line_number)
{
    if (line_number < 1 || line_number > line_count)
    {
        printf("Invalid line number.\n");
        return;
    }
    free(lines[line_number - 1]);
    for (int i = line_number - 1; i < line_count - 1; i++)
    {
        lines[i] = lines[i + 1];
    }
    line_count--;
}

int main()
{
    int choice;
    char buffer[MAX_LINE_LENGTH];

    while (1)
    {
        printf("\nText Editor\n");
        printf("1. Add Line\n");
        printf("2. View Lines\n");
        printf("3. Delete Line\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume newline

        switch (choice)
        {
        case 1:
            printf("Enter text: ");
            fgets(buffer, sizeof(buffer), stdin);
            buffer[strcspn(buffer, "\n")] = 0; // Remove trailing newline
            add_line(buffer);
            break;
        case 2:
            view_lines();
            break;
        case 3:
            printf("Enter line number to delete: ");
            int line_number;
            scanf("%d", &line_number);
            delete_line(line_number);
            break;
        case 4:
            printf("Exiting...\n");
            return 0;
        default:
            printf("Invalid choice. Try again.\n");
        }
    }
}
